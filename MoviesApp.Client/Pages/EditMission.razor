@page "/missions/edit/{Id:int}"
@using MoviesApp.Client.Services
@using MoviesApp.Shared.DTOs
@using MoviesApp.Shared.Models
@inject MissionService MissionService
@inject NavigationManager Navigation

<PageTitle>Edit Mission</PageTitle>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (mission != null)
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h3 class="mb-0">Edit Mission</h3>
                    </div>
                    <div class="card-body">
                        <EditForm Model="@mission" OnValidSubmit="@HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="alert alert-danger" />

                            <div class="mb-3">
                                <label for="name" class="form-label">Name</label>
                                <InputText id="name" class="form-control" @bind-Value="mission.Name" />
                                <ValidationMessage For="@(() => mission.Name)" />
                            </div>

                            <div class="mb-3">
                                <label for="destination" class="form-label">Destination</label>
                                <InputText id="destination" class="form-control" @bind-Value="mission.Destination" />
                                <ValidationMessage For="@(() => mission.Destination)" />
                            </div>

                            <div class="mb-3">
                                <label for="launchDate" class="form-label">Launch Date</label>
                                <InputDate id="launchDate" class="form-control" @bind-Value="mission.LaunchDate" />
                                <ValidationMessage For="@(() => mission.LaunchDate)" />
                            </div>

                            <div class="mb-3">
                                <label for="status" class="form-label">Status (Optional)</label>
                                <InputText id="status" class="form-control" @bind-Value="mission.Status" />
                                <ValidationMessage For="@(() => mission.Status)" />
                            </div>

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-secondary" @onclick="Cancel">
                                    Cancel
                                </button>
                                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    Update Mission
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-danger">
        <h4>Mission Not Found</h4>
        <p>The requested mission could not be found.</p>
        <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/missions"))">
            Back to Missions
        </button>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }

    private Mission? mission;
    private bool isLoading = true;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadMission();
    }

    private async Task LoadMission()
    {
        isLoading = true;
        var missionDto = await MissionService.GetMissionAsync(Id);

        if (missionDto != null)
        {
            mission = new Mission
            {
                Id = missionDto.Id,
                Name = missionDto.Name,
                Destination = missionDto.Destination,
                LaunchDate = missionDto.LaunchDate,
                Status = missionDto.Status
            };
        }

        isLoading = false;
    }

    private async Task HandleValidSubmit()
    {
        if (mission == null) return;

        isSubmitting = true;

        var updateDto = new UpdateMissionDto
        {
            Name = mission.Name,
            Destination = mission.Destination,
            LaunchDate = mission.LaunchDate,
            Status = mission.Status
        };

        var success = await MissionService.UpdateMissionAsync(Id, updateDto);

        if (success)
        {
            Navigation.NavigateTo("/missions");
        }

        isSubmitting = false;
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/missions");
    }
}
