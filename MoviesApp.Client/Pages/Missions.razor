@page "/missions"
@using MoviesApp.Client.Services
@using MoviesApp.Shared.DTOs
@inject MissionService MissionService
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.SignalR.Client

<PageTitle>Missions</PageTitle>
<style>

*{
    margin: 0;
    padding: 0;
}

body{
    font-family: 'Poppins', sans-serif;
    height: 100vh;
    width: 100vw;
    background: #121212;
    color: #f5f5f5;
}

.container{
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    text-align: center;
}

.form_area{
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    background-color: #1e1e1e;
    height: auto;
    width: auto;
    border-radius: 20px;
    box-shadow: 30px 35px 2px #000;
}

.title{
    color: #e0e0e0;
    font-weight: 900;
    font-size: 1.5em;
    margin-top: 20px;
}

.sub_title{
    font-weight: 600;
    margin: 5px 0;
}

.form_group{
    display: flex;
    flex-direction: column;
    align-items: baseline;
    margin: 20px;
}

.form_style{
    outline: none;
    border: 2px solid #555;
    box-shadow: 3px 4px 0px 1px #000;
    width: 290px;
    padding: 12px 10px;
    border-radius: 4px;
    font-size: 15px;
    background-color: #2c2c2c;
    color: #f5f5f5;
}

.form_style:focus, .btn:focus{
    transform: translateY(4px);
    box-shadow: 1px 2px 0px 0px #000;
}

.btn{
    padding: 15px;
    margin: 30px 0px;
    width: 310px;
    font-size: 15px;
    background: #7b4397;
    border-radius: 30px;
    font-weight: 800;
    box-shadow: 5px 5px 0px 0px #000;
    color: #fff;
}

p{
    margin: 20px 0px;
}

.link{
    font-weight: 800;
}

.missions-table{
    width: 100%;
    border-collapse: collapse;
    background-color: #1e1e1e;
    color: #f5f5f5;
}

.missions-table th, .missions-table td{
    border: 1px solid #444;
    padding: 8px;
}

.missions-table th{
    background-color: #2c2c2c;
}

.form_area select,
.form_area input{
    background-color: #2c2c2c;
    color: #f5f5f5;
    border: 1px solid #555;
}

.modal-overlay{
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.7);
    display: flex;
    align-items: center;
    justify-content: center;
}

.modal-content{
    background: #1e1e1e;
    padding: 20px;
    border-radius: 8px;
    color: #f5f5f5;
    box-shadow: 0 4px 10px rgba(0,0,0,0.5);
}

.modal-actions button{
    margin-right: 10px;
}
</style>

<div class="container">
    <div class="form_area">
        <h1 class="title">Missions</h1>
        <div class="missions-controls">
        <div class="dispatch-section">
            <h5>Manually Dispatch Missions</h5>
            <select class="form-select mb-2" @bind="selectedFleet">
                <option value="">Select fleet</option>
            </select>
            <button class="btn btn-primary" @onclick="DispatchMission">Dispatch Mission</button>
        </div>
        <div class="cancel-section">
            <h5>Cancel Missions</h5>
            <select class="form-select mb-2" @bind="selectedMissionId">
                <option value="">Select mission</option>
                @foreach (var mission in missions)
                {
                    <option value="@mission.Id">@mission.Name</option>
                }
            </select>
            <button class="btn btn-danger" @onclick="ShowCancelDialog" disabled="@(selectedMissionId == null)">Cancel Mission</button>
        </div>
        <div class="date-filter">
            <label>From:</label>
            <input type="date" class="form-control" @bind="fromDate" />
            <label>To:</label>
            <input type="date" class="form-control" @bind="toDate" />
        </div>
    </div>

    <table class="missions-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Status</th>
                <th>Created</th>
                <th>Assigned Robot</th>
                <th>Description</th>
                <th>Mission Type</th>
            </tr>
        </thead>
        <tbody>
            @if (isLoading)
            {
                <tr><td colspan="7" class="text-center">Loading...</td></tr>
            }
            else if (missions.Any())
            {
                foreach (var mission in missions)
                {
                    <tr>
                        <td>@mission.Id</td>
                        <td>@mission.Name</td>
                        <td>@mission.Status</td>
                        <td>@mission.LaunchDate.ToString("MMM dd, yyyy")</td>
                        <td>--</td>
                        <td>@mission.Destination</td>
                        <td>--</td>
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="7" class="text-center">No missions found</td></tr>
            }
        </tbody>
    </table>

    <div class="history-toggle">
        <input type="checkbox" id="viewHistorical" @bind="viewHistorical" />
        <label for="viewHistorical">View historical missions</label>
    </div>
    </div>
</div>

@if (showCancelConfirm)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h4>Warning!</h4>
            <p>Are you sure you want to cancel the following mission?</p>
            <p>@selectedMissionName</p>
            <div class="modal-actions">
                <button class="btn btn-warning" @onclick="ConfirmCancel">Yes, cancel</button>
                <button class="btn btn-secondary" @onclick="() => showCancelConfirm = false">No, don't cancel</button>
            </div>
        </div>
    </div>
}

@code {
    private List<MissionDto> missions = new();
    private bool isLoading = true;
    private HubConnection? _hubConnection;

    private string? selectedFleet;
    private int? selectedMissionId;
    private string? selectedMissionName;
    private DateTime? fromDate;
    private DateTime? toDate;
    private bool viewHistorical;
    private bool showCancelConfirm;

    protected override async Task OnInitializedAsync()
    {
        await LoadMissions();

        _hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7003/missionhub")
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<MissionDto>("MissionUpdated", (updatedMission) =>
        {
            var index = missions.FindIndex(m => m.Id == updatedMission.Id);
            if (index != -1)
            {
                missions[index] = updatedMission;
            }
            StateHasChanged();
        });

        _hubConnection.On<MissionDto>("MissionCreated", (newMission) =>
        {
            missions.Add(newMission);
            StateHasChanged();
        });

        _hubConnection.On<int>("MissionDeleted", (deletedId) =>
        {
            var mission = missions.FirstOrDefault(m => m.Id == deletedId);
            if (mission != null)
            {
                missions.Remove(mission);
                StateHasChanged();
            }
        });

        await _hubConnection.StartAsync();
    }

    private async Task LoadMissions()
    {
        isLoading = true;
        missions = await MissionService.GetMissionsAsync();
        isLoading = false;
    }

    private void DispatchMission()
    {
        // Placeholder for dispatch logic
    }

    private void ShowCancelDialog()
    {
        var mission = missions.FirstOrDefault(m => m.Id == selectedMissionId);
        selectedMissionName = mission?.Name;
        showCancelConfirm = true;
    }

    private void ConfirmCancel()
    {
        // Placeholder for cancel logic
        showCancelConfirm = false;
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
            await _hubConnection.DisposeAsync();
    }
}
